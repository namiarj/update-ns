#!/bin/sh

#
# Globals
#
master="nyx-dns"
slaves=""
config="/usr/local/etc/nsd/zones"
nsdcmd="nsd-control notify"

#
# Optional
#
sshkey="~/.ssh/ns_ed255519"

#
# Functions
#
progname=${0##*/}

cleanup ()
{
	ssh $masteropt -O exit $master 2>/dev/null
	ssh $slaveopt -O exit $slave 2>/dev/null
	rm $zonefile 2>/dev/null
	rm $tmpfile 2>/dev/null
}

connect_slave ()
{
	gen_tmp
	slaveopt="$sshoptions -o ControlPath=$tmpfile"
	if ! ssh $slaveopt -MNf $slave
	then
		error "SSH connection to $slave failed"
	fi
}

connect_master ()
{
	if [ $sshkey ]
	then
		sshoptions=" -i $sshkey"
	fi
	gen_tmp
	masteropt="$sshoptions -o ControlPath=$tmpfile"
	trap "cleanup; exit" INT TERM HUP EXIT
	if ! ssh $masteropt -MNf $master
	then
		error "SSH connection to $master failed"
	fi
}

delete_zone ()
{
	ssh_master "rm $config/$zone"
	for slave in $slaves
	do
		connect_slave
		ssh_slave "rm $config/$zone"
		disconnect_slave
	done
}

disconnect_slave ()
{
	ssh $slaveopt -O exit $slave 2>/dev/null
}

edit_zone ()
{
	if [ $EDITOR ]
	then
		$EDITOR $zonefile
	else
		editors="vi vim nvim nano joe emacs"
		for editor in $editors
		do
			if type $editor >/dev/null 2>/dev/null
			then
				$editor $zonefile
				return
			fi
		done
	fi
}

error ()
{
	echo "$progname: $*" >&2
	exit 1
}

gen_tmp ()
{
	tmpfile="/tmp/$progname"."`awk 'BEGIN {srand();printf "%d\n", rand() * 10^10}'`"
}

get_zone ()
{
	gen_tmp
	zonefile=$tmpfile
	scp_master $master:$config/$zone $zonefile
}

list_zones ()
{
	zones=`ssh_master "ls $config"`
	dialogcmd="dialog --ok-label Edit --extra-button --extra-label New --no-tags --menu Zonefiles 15 40 15"
	for zone in $zones
	do
		dialogcmd="$dialogcmd $zone $zone "
	done
	gen_tmp
	$dialogcmd 2>$tmpfile
	case $? in
	0)
		zone=`more $tmpfile`
		rm $tmpfile
		;;
	3)
		new_zone
		;;
	*)
		exit 1
		;;
	esac
}

new_zone ()
{
	exit
}

scp_master ()
{
	if ! scp $masteropt $@
	then
		error "could not scp: $@"
	fi
}

scp_slave ()
{
	if ! scp $slaveopt $@
	then
		error "could not scp: $@"
	fi
}

ssh_master ()
{
	if ! ssh $masteropt $master $@
	then
		error "SSH command failed: $@"
	fi
}

ssh_slave ()
{
	if ! ssh $slaveopt $slave $@
	then
		error "SSH connection to $slave failed"
	fi
}

upload_zone ()
{
	echo "updating $master..."
	scp_master $zonefile $master:$config/$zone
	ssh_master $nsdcmd
	for slave in $slaves
	do
		echo "updating $slave..."
		connect_slave
		scp_slave $zonefile $slave:$config/$zone
		ssh_slave $nsdcmd
		disconnect_slave
	done
}

#
# Main
#
main ()
{
	connect_master
	list_zones
	get_zone
	edit_zone
	upload_zone
}

main $@
